package starwars.actions;

import edu.monash.fit2099.simulator.userInterface.MessageRenderer;
import starwars.Capability;
import starwars.SWActionInterface;
import starwars.SWActor;
import starwars.SWAffordance;
import starwars.SWEntityInterface;

public class Train extends SWAffordance implements SWActionInterface {
	/**
	 * Constructor for the <code>Train</code> class. Will initialize the <code>messageRenderer</code> and
	 * give <code>Train</code> a priority of 1 (lowest priority is 0).
	 * 
	 * @param theTarget the target being trained
	 * @param m message renderer to display messages
	 */
	public Train(SWEntityInterface theTarget, MessageRenderer m) {
		super(theTarget, m);	
		priority = 1;
	}
		
	/**
	 * A String describing what this <code>Train</code> action will do, suitable for display on a user interface
	 * 
	 * @return String comprising "train " and the short description of the target of this <code>Affordance</code>
	 */
	@Override
	public String getDescription() {
		return "train " + this.target.getShortDescription();
	}


	/**
	 * Determine whether a particular <code>SWActor a</code> can be trained.
	 * 
	 * @param 	a the <code>SWActor</code> being queried
	 * @return 	true if <code>SWActor</code> is human controlled (aka Luke), false if not.
	 */
	@Override
	public boolean canDo(SWActor a) {
		return a.hasCapability(Capability.TRAINEE);
	}

	/**
	 * Perform the <code>Train</code> command on an entity.
	 * @param 	a the <code>SWActor</code> who is being trained
	 * @pre 	this method should only be called if the <code>SWActor a</code> is alive
	 * @pre		training must not be performed on a dead <code>SWActor</code>
	 * @see		starwars.SWActor#isDead()
	 * @see 	starwars.Team
	 */
	@Override
	public void act(SWActor a) {
		if(a.getAffordance(Control.class) != null)
		{
		    a.removeAffordance(Control.class);
		    a.say(String.format("%s can no longer be tricked so easily.", a.getShortDescription()));
		    return;
		}
		    
		if(!a.hasCapability(Capability.WIELDS_LIGHTSABER))
		{
		    a.addCapability(Capability.WIELDS_LIGHTSABER);
		    a.say(String.format("%s learns an elegant weapon from a more civilized age.", a.getShortDescription()));
		    return;
		} 
		    
		if(!a.hasCapability(Capability.MIND_CONTROLLER))
		{
		    a.addCapability(Capability.MIND_CONTROLLER);
		    a.removeCapability(Capability.TRAINEE);
		    a.say(String.format("%s can control the minds of the weak willed.", a.getShortDescription()));
		    a.say(String.format("%s has completed his training.", a.getShortDescription()));
		    return;
		} 
	}
}
